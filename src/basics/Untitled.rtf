{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf460
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 Courier-Bold;
\f3\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red234\green255\blue193;\red83\green83\blue83;
\red29\green111\blue63;\red184\green73\blue12;\red13\green95\blue24;\red51\green109\blue125;\red50\green91\blue142;
}
\margl1440\margr1440\vieww19820\viewh9800\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "http://www.python-course.eu/lambda.php"}}{\fldrslt 
\f0\fs24 \cf0 http://www.python-course.eu/lambda.php}}
\f0\fs24  - Lambda/map/reduce/filter\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://pythontips.com/2013/09/29/the-python-yield-keyword-explained/"}}{\fldrslt \cf0 https://pythontips.com/2013/09/29/the-python-yield-keyword-explained/}} - Iterator/generator\
\
\

\b List Operations : append()/sort(re)/reverse()/extend(L)/remove()using value/insert()/pop()/index()/count()/
\b0 \
>>> L = [ 8,4,5,6,3]\
>>> print L\
[8, 4, 5, 6, 3]\
>>> print L.append(9)\
None\
>>> L.append(9)\
>>> print L\
[8, 4, 5, 6, 3, 9, 9]\
>>> L.remove(9)\
>>> print L\
[8, 4, 5, 6, 3, 9]\
>>> L.extend(10) // need to pass list as input to extend\
Traceback (most recent call last):\
  File "<stdin>", line 1, in <module>\
TypeError: 'int' object is not iterable\
>>> M = [2,3,4]\
>>> L.extend(M)\
>>> print M\
[2, 3, 4]\
>>> print L\
[8, 4, 5, 6, 3, 9, 2, 3, 4]\
>>> L.insert(3,17)\
>>> print L\
[8, 4, 5, 17, 6, 3, 9, 2, 3, 4]\
>>> L.pop(3)\
17\
>>> print L\
[8, 4, 5, 6, 3, 9, 2, 3, 4]\
>>> L.index(6)\
3\
>>> L.count('3')\
0\
>>> L.count(3)\
2\
>>> print L.sort()\
None\
>>> print L\
[2, 3, 3, 4, 4, 5, 6, 8, 9]\
>>> print L.sort(reverse=True)\
None\
>>> print L\
[9, 8, 6, 5, 4, 4, 3, 3, 2]\
>>> print L.sort(key=3, reverse=True)\
Traceback (most recent call last):\
  File "<stdin>", line 1, in <module>\
TypeError: 'int' object is not callable\
>>> L.reverse()\
>>> print L\
[2, 3, 3, 4, 4, 5, 6, 8, 9]\
>>> L.reverse()\
>>> print L\
[9, 8, 6, 5, 4, 4, 3, 3, 2]\
>>> M = L.copy()\
Traceback (most recent call last):\
  File "<stdin>", line 1, in <module>\
AttributeError: 'list' object has no attribute 'copy'\
>>> print L[:]\
[9, 8, 6, 5, 4, 4, 3, 3, 2]\
>>> M = L[:]\
>>> print M\
[9, 8, 6, 5, 4, 4, 3, 3, 2]\
>>> S = list(M)\
>>> print S\
[9, 8, 6, 5, 4, 4, 3, 3, 2]\
\

\b\fs28 Indexes: 
\fs24 \
LTR =  0 to n\
RTL = -1 to n \
Always LEFT to RIGHT concept same as STR indexes\
\

\b0 >> L = [1,2,3,4]\
>>> print L[-1]\
4\
>>> print L[-4]\
1\
>>> print L[-5]
\b \

\b0 Traceback (most recent call last):\
  File "<stdin>", line 1, in <module>\
IndexError: list index out of range\
>>> print L[4]\
Traceback (most recent call last):\
  File "<stdin>", line 1, in <module>\
IndexError: list index out of range\
>>>\
\

\b LISTS AS STACK:
\b0 \
SyntaxError: invalid syntax\
>>> L.append("H")\
>>> print L\
[9, 8, 6, 5, 4, 4, 3, 3, 2, 'H']\
>>> L.pop()\
'H'\
>>> print L\
[9, 8, 6, 5, 4, 4, 3, 3, 2]\
>>>\

\b\fs28 Lists as Queue:\

\b0 from collections import deque\
queue = deque(L)\
queue.append(\'91H\'92)\
queue.popleft() // remove first left most element as FCFS concept in Queue
\fs24 \

\b \

\fs28 List as comprehensions:\

\fs24 \
writing single line of code
\b0 \
\
[ (X) for X in L] - X is item in list and perform operations of each item in list\
[ (x**2) for X in L] \
\
>>> [ (x**2) for X in L]\
[4, 4, 4, 4]\
\
>>> print L\
[9, 8, 6, 5, 4, 4, 3, 3, 2]\
>>> squares = [x**2 for x in L]\
>>> print squares\
[81, 64, 36, 25, 16, 16, 9, 9, 4]\
\'97\'97\'97\'97\'97\
>>> res = list(map(lambda X : X+1, L))\
>>> print res\
[2, 3, 4, 5]\
>>>\
>>> X = [1,2,3]\
>>> Y = [4,5,6]\
>>> [ (x,y) for x in X for y in Y if x!=y]\
[(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)] similar to list.append((x,y))\
\'97\'97\'97\'97\'97\'97\'97\
>>> X = ['A','B','C']\
>>> Y = ['a','b','c']\
>>> [(x,y) for x in X for y in Y if x.lower() == y]\
[('A', 'a'), ('B', 'b'), ('C', 'c')]\
>>>\

\b\fs28 \
Applying functions on elements of list:
\b0\fs24 \
>>> L = [1.2,3,9.0]\
>>> [ abs(x) for x in L]\
[1.2, 3, 9.0]\
>>> [ int(x) for x in L]\
[1, 3, 9]\
>>> [ float(x) for x in L]\
[1.2, 3.0, 9.0]\
>>> [ oct(x) for x\
\

\b Calling method on elements on List:
\b0 \
>>> freshfruit = ['  banana', '  loganberry ', 'passion fruit  ']\
>>> [weapon.strip() for weapon in freshfruit]\
['banana', 'loganberry', 'passion fruit']\
>>>\
\

\b Creating list of 2 tuples like 
\b0 \
>>> [(x, x**2) for x in range(6)]\
[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]\
\
\
\pard\pardeftab720\sl370\partightenfactor0

\f1\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 matrix \cf4 \strokec4 =\cf2 \strokec2  [\
[\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 2\cf2 \strokec2 , \cf5 \strokec5 3\cf2 \strokec2 , \cf5 \strokec5 4\cf2 \strokec2 ],\
[\cf5 \strokec5 5\cf2 \strokec2 , \cf5 \strokec5 6\cf2 \strokec2 , \cf5 \strokec5 7\cf2 \strokec2 , \cf5 \strokec5 8\cf2 \strokec2 ],\
[\cf5 \strokec5 9\cf2 \strokec2 , \cf5 \strokec5 10\cf2 \strokec2 , \cf5 \strokec5 11\cf2 \strokec2 , \cf5 \strokec5 12\cf2 \strokec2 ],\
]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \

\b0 >>> [row[2] for row in matrix] // printing 3rd columns values\
[3, 7, 11]\
>>> [row[0] for row in matrix]\
[1, 5, 9]\
>>>\
using  [row[2] for row in matrix] logic, pulling all columns elements one by one n insert into another list
\b \
\pard\pardeftab720\sl370\partightenfactor0

\f2\fs30 \cf6 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 >>> 
\f1\b0 \cf2 \strokec2 transposed \cf4 \strokec4 =\cf2 \strokec2  []\

\f2\b \cf6 \strokec6 >>> \cf7 \strokec7 for
\f1\b0 \cf2 \strokec2  i 
\f2\b \cf7 \strokec7 in
\f1\b0 \cf2 \strokec2  \cf7 \strokec7 range\cf2 \strokec2 (\cf5 \strokec5 4\cf2 \strokec2 ):\

\f2\b \cf6 \strokec6 ... 
\f1\b0 \cf2 \strokec2     
\f3\i \cf8 \strokec8 # the following 3 lines implement the nested listcomp
\f1\i0 \cf2 \strokec2 \

\f2\b \cf6 \strokec6 ... 
\f1\b0 \cf2 \strokec2     transposed_row \cf4 \strokec4 =\cf2 \strokec2  []\

\f2\b \cf6 \strokec6 ... 
\f1\b0 \cf2 \strokec2     
\f2\b \cf7 \strokec7 for
\f1\b0 \cf2 \strokec2  row 
\f2\b \cf7 \strokec7 in
\f1\b0 \cf2 \strokec2  matrix:\

\f2\b \cf6 \strokec6 ... 
\f1\b0 \cf2 \strokec2         transposed_row\cf4 \strokec4 .\cf2 \strokec2 append(row[i])\

\f2\b \cf6 \strokec6 ... 
\f1\b0 \cf2 \strokec2     transposed\cf4 \strokec4 .\cf2 \strokec2 append(transposed_row)\

\f2\b \cf6 \strokec6 ...
\f1\b0 \cf2 \strokec2 \

\f2\b \cf6 \strokec6 >>> 
\f1\b0 \cf2 \strokec2 transposed\
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\
\
\pard\pardeftab720\sl370\partightenfactor0
\cf7 \strokec7 list\cf2 \strokec2 (\cf7 \strokec7 zip\cf2 \strokec2 (\cf4 \strokec4 *\cf2 \strokec2 matrix)) // will do same operations quickly\
[(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 DEL statement:\
del will delete both indices & values\

\b0 >>> print L\
[1.2, 3, 3, 5, 6]\
>>> del L[-1:-2]  Always LTR deletion same as indices,not in reverse\
>>> print L\
[1.2, 3, 3, 5, 6]\
>>> del L[-2:-1]
\b \
\
REMOVE statement : To remove element by its value\
if duplicate elements r there,then it will remove first occurrence of value\
\

\b0 >>>print L\
[1.2, 3, 6, 3]\
>>> L.remove(3)\
>>> print L\
[1.2, 6, 3]\
>>>
\b \
\

\fs36 TUPLES:\

\fs24 \
\

\b0 >>> t = hello,venu,world\
Traceback (most recent call last):\
  File "<stdin>", line 1, in <module>\
NameError: name 'hello' is not defined\
\

\b String default data type is tuple
\b0 \
>>> t = 'hello,venu,world'\
>>> print t\
hello,venu,world\
\
>>>
\b\fs30  t = 'hello','venu','world'
\b0\fs24 \
>>> print t\
('hello', 'venu', 'world')\
\
>>> u = t,(1,2,3,4) adding 2 tuples together\
>>> print u\

\b (('hello', 'venu', 'world'), (1, 2, 3, 4))
\b0 \
\

\b IMMUTABLE types:\

\b0 \
>>> t[0] = 345\
Traceback (most recent call last):\
  File "<stdin>", line 1, in <module>\

\b TypeError: 'tuple' object does not support item assignment 
\b0 \
\

\b Accept mutable objects:\

\b0 \
>>> L1 = [1,2,3]\
>>> L2 = [3,4,5]\
>>> v = (L1,L2)\
>>> print v\
\
([1, 2, 3], [3, 4, 5])\
>>> x = ()\
>>> print x\
()\
>>> len(x)\
0\

\b String here:
\b0 \
>>> name = "sakthi"\
>>> len(name)\
6\
>>> print name\
sakthi\
\

\b Converted to tuple using trailing Comma at end:
\b0 \
\
>>> name = 
\b\fs36 "sakthi",
\b0\fs24 \
>>> len(name)\
1\
>>> print name\

\b\fs36 ('sakthi',)\

\b0\fs24 \
>>> print v\
([1, 2, 3], [3, 4, 5])\
>>>\
\
>>> i,j,k = v\
Traceback (most recent call last):\
  File "<stdin>", line 1, in <module>\

\b\fs26 ValueError: need more than 2 values to unpack // here V contains only 2 values but LFH assignment having 3 values i,j,k
\b0\fs24 \
\
>>> print t\
('hello', 'venu', 'world')\
\
>>> i,j,k = t\
>>> print i\
hello\
>>> print j\
venu\
>>>\
\

\b\fs34 Sets:
\b0\fs24 \
\
>>> emp = \{ 'x','y','z'\}\
>>> print(emp)\
set(['y', 'x', 'z'])\
\
>>> name = "venu"\
>>> print set(name)\
set(['u', 'n', 'e', 'v'])\
\

\b\fs28 Basic set operations also included:
\b0\fs24 \
\
a - b // a & b // a | b ( basic set operations)\
\
\

\b Remove Duplicates:
\b0 \
\
>>> emp = \{ 'x','y','z','x','y'\}\
\
>>> print(emp)\
set(['y', 'x', 'z'])\
>>>\
\
\pard\pardeftab720\sl370\partightenfactor0

\f2\b\fs30 \cf6 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 >>> 
\f1\b0 \cf2 \strokec2 tel \cf4 \strokec4 =\cf2 \strokec2  \{\cf9 \strokec9 'jack'\cf2 \strokec2 : \cf5 \strokec5 4098\cf2 \strokec2 , \cf9 \strokec9 'sape'\cf2 \strokec2 : \cf5 \strokec5 4139\cf2 \strokec2 \}\

\f2\b \cf6 \strokec6 >>> 
\f1\b0 \cf2 \strokec2 tel[\cf9 \strokec9 'guido'\cf2 \strokec2 ] \cf4 \strokec4 =\cf2 \strokec2  \cf5 \strokec5 4127\cf2 \strokec2 \

\f2\b \cf6 \strokec6 >>> 
\f1\b0 \cf2 \strokec2 tel\
\{'sape': 4139, 'guido': 4127, 'jack': 4098\}\

\f2\b \cf6 \strokec6 >>> 
\f1\b0 \cf2 \strokec2 tel[\cf9 \strokec9 'jack'\cf2 \strokec2 ]\
4098\

\f2\b \cf6 \strokec6 >>> \cf7 \strokec7 del
\f1\b0 \cf2 \strokec2  tel[\cf9 \strokec9 'sape'\cf2 \strokec2 ]\

\f2\b \cf6 \strokec6 >>> 
\f1\b0 \cf2 \strokec2 tel[\cf9 \strokec9 'irv'\cf2 \strokec2 ] \cf4 \strokec4 =\cf2 \strokec2  \cf5 \strokec5 4127\cf2 \strokec2 \

\f2\b \cf6 \strokec6 >>> 
\f1\b0 \cf2 \strokec2 tel\
\{'guido': 4127, 'irv': 4127, 'jack': 4098\}\

\f2\b \cf6 \strokec6 >>> 
\f1\b0 \cf7 \strokec7 list\cf2 \strokec2 (tel\cf4 \strokec4 .\cf2 \strokec2 keys())\
['irv', 'guido', 'jack']\

\f2\b \cf6 \strokec6 >>> 
\f1\b0 \cf7 \strokec7 sorted\cf2 \strokec2 (tel\cf4 \strokec4 .\cf2 \strokec2 keys())\
['guido', 'irv', 'jack']\

\f2\b \cf6 \strokec6 >>> 
\f1\b0 \cf9 \strokec9 'guido'\cf2 \strokec2  
\f2\b \cf7 \strokec7 in
\f1\b0 \cf2 \strokec2  tel\
True\

\f2\b \cf6 \strokec6 >>> 
\f1\b0 \cf9 \strokec9 'jack'\cf2 \strokec2  
\f2\b \cf7 \strokec7 not
\f1\b0 \cf2 \strokec2  
\f2\b \cf7 \strokec7 in
\f1\b0 \cf2 \strokec2  tel\
False\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
}